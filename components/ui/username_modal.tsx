"use client";

import { useState, useEffect } from 'react';
import { useWallet } from '@/context/WalletContext';
import { motion, AnimatePresence } from 'framer-motion';
import PixelatedContainer from '@/components/game/PixelatedContainerBig';


const UsernameModal = () => {
  const [visible, setVisible] = useState(false);
  const [username, setUsername] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isChecking, setIsChecking] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState(false);
  const { isConnected, publicKey, walletData, setUsername: updateUsername, isNewUser } = useWallet();

  // Function to validate username format
  const isValidUsername = (name: string): boolean => {
    // Only allow English letters, numbers, and underscore
    // No spaces, special characters or non-English letters
    const validUsernameRegex = /^[a-zA-Z0-9_]+$/;
    return validUsernameRegex.test(name);
  };

  // Check if user has explicitly chosen a name
  const hasChosenName = (): boolean => {
    if (!publicKey) return false;
    
    // Check if we have a record of this wallet having chosen a name
    const hasNameKey = `hasChosenName_${publicKey}`;
    return localStorage.getItem(hasNameKey) === 'true';
  };

  // Check if username is auto-generated
  const isAutoGeneratedName = (name?: string): boolean => {
    if (!name) return true;
    return name.startsWith('User_');
  };

  // Mark user as having chosen a name
  const markNameAsChosen = () => {
    if (!publicKey) return;
    
    const hasNameKey = `hasChosenName_${publicKey}`;
    localStorage.setItem(hasNameKey, 'true');
  };

  // Handle username input change
  const handleUsernameChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    setUsername(value);
    
    // Clear any previous errors
    if (error && error.includes("only letters, numbers, and underscores")) {
      setError(null);
    }
  };

  useEffect(() => {
    // Only show overlay for new users
    if (isConnected && publicKey) {
      if (isNewUser) {
        console.log('Showing pet name prompt for new user');
        setVisible(true);
      } else {
        // Only show for existing users if they have an auto-generated name and haven't chosen one
        const hasCustomName = !isAutoGeneratedName(walletData?.username);
        const hasExplicitlyChosen = hasChosenName();
        
        if (!hasCustomName && !hasExplicitlyChosen) {
          console.log('Showing pet name prompt for user with auto-generated name');
          setVisible(true);
        }
      }
    }
  }, [isConnected, publicKey, isNewUser, walletData?.username, hasChosenName]);

  // Prevent dismiss by click on backdrop
  const handleBackdropClick = (e: React.MouseEvent) => {
    e.preventDefault();
    e.stopPropagation();
    // Show an error if they try to click away
    setError("Please set a pet name to continue");
  };

  // Check if pet name is already taken
  const checkUsernameAvailability = async (username: string): Promise<boolean> => {
    if (!username.trim()) return false;
    
    setIsChecking(true);
    setError(null);
    
    try {
      const response = await fetch('/api/check-username', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ username: username.trim() }),
      });
      
      const data = await response.json();
      
      if (!response.ok) {
        throw new Error(data.error || 'Failed to check pet name availability');
      }
      
      return data.available;
    } catch (error) {
      console.error('Error checking pet name availability:', error);
      setError('Could not verify pet name availability. Please try again.');
      return false;
    } finally {
      setIsChecking(false);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    const trimmedUsername = username.trim();
    if (!trimmedUsername) return;
    
    // Validate username format before submission
    if (!isValidUsername(trimmedUsername)) {
      setError("Pet name can only contain English letters, numbers, and underscores. No spaces or special characters allowed.");
      return;
    }
    
    setIsSubmitting(true);
    setError(null);
    
    try {
      // First check if pet name is available
      const isAvailable = await checkUsernameAvailability(trimmedUsername);
      
      if (!isAvailable) {
        setError("This pet name is already taken. Please choose another.");
        setIsSubmitting(false);
        return;
      }
      
      // If available, update the pet name
      const result = await updateUsername(trimmedUsername);
      
      if (result) {
        // Mark this wallet as having explicitly chosen a name
        markNameAsChosen();
        
        // Show success message briefly before closing
        setSuccess(true);
        setTimeout(() => {
          setVisible(false);
        }, 1500);
      } else {
        setError("Failed to save pet name to database. Please try again.");
      }
    } catch (error) {
      console.error('Failed to update pet name:', error);
      setError("Something went wrong. Please try again.");
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <AnimatePresence>
      {visible && (
        <div 
          className="fixed inset-0 flex items-center justify-center"
          style={{ zIndex: 555 }}
        >
          <div className="absolute inset-0 bg-black/50" onClick={handleBackdropClick}></div>
          <motion.div
            initial={{ opacity: 0, scale: 0.8 }}
            animate={{ opacity: 1, scale: 1 }}
            exit={{ opacity: 0, scale: 0.8 }}
            transition={{ duration: 0.5 }}
            className="relative z-10 max-w-md w-full mx-4"
          >
            <PixelatedContainer className="p-6">
              <form onSubmit={handleSubmit}>
                <h1 className="text-2xl font-pixelify text-[#304700] mb-6 text-center font-bold">
                  Choose Your Pet Name
                </h1>
                
                {success ? (
                  <div className="text-center mb-6">
                    <div className="bg-[#DCEEA0] p-4 mb-4">
                      <p className="text-xl font-pixelify text-[#304700] font-bold">
                        Pet name saved successfully!
                      </p>
                      <p className="text-lg font-pixelify text-[#304700] mt-2">
                        Welcome, {username}!
                      </p>
                    </div>
                  </div>
                ) : (
                  <>
                    <div className="mb-6">
                      <label htmlFor="username" className="block text-lg font-pixelify text-[#304700] mb-2 font-bold">
                        What would you like to name your pet?
                      </label>
                      <input
                        type="text"
                        id="username"
                        value={username}
                        onChange={handleUsernameChange}
                        className="w-full px-4 py-3 bg-[#EBFFB7] border border-[#304700] font-pixelify text-lg text-[#304700] placeholder-[#92AD00]/50 focus:outline-none focus:ring-2 focus:ring-[#304700]"
                        placeholder="Enter pet name..."
                        maxLength={20}
                        required
                      />
                      <p className="text-[#304700] text-sm mt-2 font-pixelify">
                        Your pet name must contain only English letters, numbers, and underscores. No spaces or special characters allowed.
                      </p>
                    </div>
                  
                    {error && (
                      <div className="mb-6">
                        <div className="bg-red-100 border border-red-400 p-3">
                          <p className="text-red-800 font-pixelify">{error}</p>
                        </div>
                      </div>
                    )}
                  
                    <div className="flex justify-center">
                      <button
                        type="submit"
                        disabled={!username.trim() || isSubmitting || isChecking || !isValidUsername(username.trim())}
                        className="px-6 py-3 bg-[#304700] text-white font-pixelify hover:bg-[#3c5800] transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                      >
                        {isChecking ? 'Checking...' : isSubmitting ? 'Saving...' : 'Save Pet Name'}
                      </button>
                    </div>
                  </>
                )}
              </form>
            </PixelatedContainer>
          </motion.div>
        </div>
      )}
    </AnimatePresence>
  );
};

export default UsernameModal; 